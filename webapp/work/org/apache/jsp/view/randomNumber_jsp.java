/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2024-04-10 02:20:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;

public final class randomNumber_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');

ArrayList<Integer> numberList = (ArrayList<Integer>)request.getAttribute("numberList");
ArrayList<Integer> sortNumberList = (ArrayList<Integer>)request.getAttribute("sortNumberList");

      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("	<head>\n");
      out.write("		<title>数字探しゲーム</title>\n");
      out.write("		<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print( request.getContextPath() );
      out.write("/css/randomNumber.css\">\n");
      out.write("		\n");
      out.write("		<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("			var start = new Date();\n");
      out.write("			// 初期化\n");
      out.write("			var hour = 0;\n");
      out.write("			var min = 0;\n");
      out.write("			var sec = 0;\n");
      out.write("			var now = 0;\n");
      out.write("			var datet = 0;\n");
      out.write("			var time = 0;\n");
      out.write("			\n");
      out.write("			function disp(){\n");
      out.write("				now = new Date();\n");
      out.write("				datet = parseInt((now.getTime() - start.getTime()) / 1000);			\n");
      out.write("				hour = parseInt(datet / 3600);\n");
      out.write("				min = parseInt((datet / 60) % 60);\n");
      out.write("				sec = datet % 60;\n");
      out.write("							\n");
      out.write("				// 数値が1桁の場合、頭に0を付けて2桁で表示する指定\n");
      out.write("				if(hour < 10) { hour = \"0\" + hour; }\n");
      out.write("				if(min < 10) { min = \"0\" + min; }\n");
      out.write("				if(sec < 10) { sec = \"0\" + sec; }\n");
      out.write("\n");
      out.write("				// フォーマットを指定（不要な行を削除する）\n");
      out.write("				time = hour + ':' + min + ':' + sec; // パターン1\n");
      out.write("			\n");
      out.write("				// テキストフィールドにデータを渡す処理（不要な行を削除する）\n");
      out.write("				document.form.field.value = time; // パターン1\n");
      out.write("			\n");
      out.write("				setTimeout(\"disp()\", 1000);		\n");
      out.write("			}\n");
      out.write("		</script>\n");
      out.write("		\n");
      out.write("	</head>\n");
      out.write("\n");
      out.write("	<body onload=\"disp()\">\n");
      out.write("		<h2>数字を探せ31</h2>\n");
      out.write("		");
 if(numberList != null) { 
      out.write("\n");
      out.write("			<div class = \"container\">\n");
      out.write("				<p class = \"relative\">下の31個の数字から最小, 最大, 中間(16番目)の<br>\n");
      out.write("				数字を探して答えてください</p>\n");
      out.write("				<form onsubmit = \"submitCheck(); return false\" name = \"form\">\n");
      out.write("					<table>\n");
      out.write("						<tr>\n");
      out.write("							<th></th>\n");
      out.write("							<td><input type=\"text\" name=\"field\"></td>\n");
      out.write("						</tr>\n");
      out.write("						<tr>\n");
      out.write("							<th>最小</th>\n");
      out.write("							<td><input id=\"min\" type=\"text\" name=\"min\" required></td>\n");
      out.write("						</tr>\n");
      out.write("						<tr>\n");
      out.write("							<th>最大</th>\n");
      out.write("							<td><input id=\"max\" type=\"text\" name=\"max\" required></td>\n");
      out.write("						</tr>\n");
      out.write("						<tr>\n");
      out.write("							<th>中間</th>\n");
      out.write("							<td><input id=\"mid\" type=\"text\" name=\"mid\" required></td> \n");
      out.write("						</tr>\n");
      out.write("						<tr>\n");
      out.write("							<th></th>\n");
      out.write("							<td><input id=\"btn\" type=\"submit\" value=\"答える\"></td>\n");
      out.write("						</tr>\n");
      out.write("					</table>\n");
      out.write("				</form>\n");
      out.write("				<button type=\"button\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/randomNumber'\">もう一度</button>\n");
      out.write("				<div class = \"aa\">");
      out.print( numberList.get(0) );
      out.write("</div>\n");
      out.write("				<div class = \"ab\">");
      out.print( numberList.get(1) );
      out.write("</div>\n");
      out.write("				<div class = \"ac\">");
      out.print( numberList.get(2) );
      out.write("</div>\n");
      out.write("				<div class = \"ad\">");
      out.print( numberList.get(3) );
      out.write("</div>\n");
      out.write("				<div class = \"ae\">");
      out.print( numberList.get(4) );
      out.write("</div>\n");
      out.write("				<div class = \"af\">");
      out.print( numberList.get(5) );
      out.write("</div>\n");
      out.write("				<div class = \"ag\">");
      out.print( numberList.get(6) );
      out.write("</div>\n");
      out.write("				<div class = \"ah\">");
      out.print( numberList.get(7) );
      out.write("</div>\n");
      out.write("				<div class = \"ai\">");
      out.print( numberList.get(8) );
      out.write("</div>\n");
      out.write("				<div class = \"aj\">");
      out.print( numberList.get(9) );
      out.write("</div>\n");
      out.write("				<div class = \"ak\">");
      out.print( numberList.get(10) );
      out.write("</div>\n");
      out.write("				<div class = \"al\">");
      out.print( numberList.get(11) );
      out.write("</div>\n");
      out.write("				<div class = \"am\">");
      out.print( numberList.get(12) );
      out.write("</div>\n");
      out.write("				<div class = \"an\">");
      out.print( numberList.get(13) );
      out.write("</div>\n");
      out.write("				<div class = \"ao\">");
      out.print( numberList.get(14) );
      out.write("</div>\n");
      out.write("				<div class = \"ap\">");
      out.print( numberList.get(15) );
      out.write("</div>\n");
      out.write("				<div class = \"aq\">");
      out.print( numberList.get(16) );
      out.write("</div>\n");
      out.write("				<div class = \"ar\">");
      out.print( numberList.get(17) );
      out.write("</div>\n");
      out.write("				<div class = \"as\">");
      out.print( numberList.get(18) );
      out.write("</div>\n");
      out.write("				<div class = \"at\">");
      out.print( numberList.get(19) );
      out.write("</div>\n");
      out.write("				<div class = \"au\">");
      out.print( numberList.get(20) );
      out.write("</div>\n");
      out.write("				<div class = \"av\">");
      out.print( numberList.get(21) );
      out.write("</div>\n");
      out.write("				<div class = \"aw\">");
      out.print( numberList.get(22) );
      out.write("</div>\n");
      out.write("				<div class = \"ax\">");
      out.print( numberList.get(23) );
      out.write("</div>\n");
      out.write("				<div class = \"ay\">");
      out.print( numberList.get(24) );
      out.write("</div>\n");
      out.write("				<div class = \"az\">");
      out.print( numberList.get(25) );
      out.write("</div>\n");
      out.write("				<div class = \"ba\">");
      out.print( numberList.get(26) );
      out.write("</div>\n");
      out.write("				<div class = \"bb\">");
      out.print( numberList.get(27) );
      out.write("</div>\n");
      out.write("				<div class = \"bc\">");
      out.print( numberList.get(28) );
      out.write("</div>\n");
      out.write("				<div class = \"bd\">");
      out.print( numberList.get(29) );
      out.write("</div>\n");
      out.write("				<div class = \"be\">");
      out.print( numberList.get(30) );
      out.write("</div>\n");
      out.write("			</div>\n");
      out.write("		\n");
      out.write("			<script type=\"text/javascript\">\n");
      out.write("				\n");
      out.write("				function submitCheck() {			\n");
      out.write("					var min = document.getElementById('min').value;\n");
      out.write("					var max = document.getElementById('max').value;\n");
      out.write("					var mid = document.getElementById('mid').value;\n");
      out.write("					var minAnswer;\n");
      out.write("					var maxAnswer;\n");
      out.write("					var midAnswer;\n");
      out.write("	\n");
      out.write("					if(min == ");
      out.print( sortNumberList.get(0) );
      out.write(") {\n");
      out.write("						minAnswer = \"正解⭕️\";\n");
      out.write("					} else {\n");
      out.write("						minAnswer = \"不正解(正解：");
      out.print( sortNumberList.get(0) );
      out.write(")\";\n");
      out.write("					}\n");
      out.write("		\n");
      out.write("					if(max == ");
      out.print( sortNumberList.get(30) );
      out.write(") {\n");
      out.write("						maxAnswer = \"正解⭕️\";\n");
      out.write("					} else {\n");
      out.write("						maxAnswer = \"不正解(正解：");
      out.print( sortNumberList.get(30) );
      out.write(")\";\n");
      out.write("					}\n");
      out.write("		\n");
      out.write("					if(mid == ");
      out.print( sortNumberList.get(15) );
      out.write(") {\n");
      out.write("						midAnswer = \"正解⭕️\";\n");
      out.write("					} else {\n");
      out.write("						midAnswer = \"不正解(正解：");
      out.print( sortNumberList.get(15) );
      out.write(")\";\n");
      out.write("					}\n");
      out.write("	\n");
      out.write("					alert(minAnswer + '\\n' + maxAnswer + '\\n' + midAnswer + '\\n' + '時間：' + time);\n");
      out.write("				}\n");
      out.write("			</script>\n");
      out.write("		");
 } 
      out.write("\n");
      out.write("	</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
