/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2024-05-13 08:36:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class calcProfit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

// 売上高
int sales = (int)(Math.random() * 3);
if(sales == 0) {
	sales = 1000;
} else if(sales == 1) {
	sales = 2000;
} else if(sales == 2) {
	sales = 3000;
}
// 固定費
int fix = (int)(Math.random() * 5);
if(fix == 0) {
	fix = 100;
} else if(fix == 1) {
	fix = 200;
} else if(fix == 2) {
	fix = 300;
} else if(fix == 3) {
	fix = 400;
} else if(fix == 4) {
	fix = 500;
}

// 変動費率
int num = (int)(Math.random() * 8);
double variable = 0.0;
if(num == 0) {
	variable = 0.1;
} else if(num == 1) {
	variable = 0.2;
} else if(num == 2) {
	variable = 0.3;
} else if(num == 3) {
	variable = 0.4;
} else if(num == 4) {
	variable = 0.5;
} else if(num == 5) {
	variable = 0.6;
} else if(num == 6) {
	variable = 0.7;
} else if(num == 7) {
	variable = 0.8;
}

// 限界利益率
double marginalProfit = (sales - (sales * variable)) / (double)sales;
// 損益分岐点売上高
int breakEvenPoint = (int)(fix / (1 - variable));
// 損益分岐点比率
double breakEvenPointRate = (double)(Math.round(breakEvenPoint / (double)sales * 100)) / 100;
// 安全余裕率
double safetyMarginRatio = (double)(Math.round((sales - breakEvenPoint) / (double)sales * 100)) / 100; 


      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("	<head>\n");
      out.write("		<title>利益計算</title>\n");
      out.write("	</head>\n");
      out.write("\n");
      out.write("	<body>\n");
      out.write("		<div>\n");
      out.write("			<table style=\"margin-left: 4vw; margin-top: 3vw; border-spacing: 1vw; text-align: left;\">\n");
      out.write("				<tr>\n");
      out.write("					<th>単位</th>\n");
      out.write("					<td>億円</td>\n");
      out.write("				<tr>\n");
      out.write("					<th>売上高</th>\n");
      out.write("					<td>");
      out.print( sales );
      out.write("</td>\n");
      out.write("				</tr>\n");
      out.write("				<tr>\n");
      out.write("					<th>変動費</th>\n");
      out.write("					<td>");
      out.print( (int)(sales * variable) );
      out.write("</td>\n");
      out.write("				</tr>\n");
      out.write("				<tr>\n");
      out.write("					<th>固定費</th>\n");
      out.write("					<td>");
      out.print( fix );
      out.write("</td>\n");
      out.write("				</tr>\n");
      out.write("				<tr>\n");
      out.write("					<th>営業利益</th>\n");
      out.write("					<td>");
      out.print( (int)(sales - (sales * variable + fix)) );
      out.write("</td>\n");
      out.write("				<tr>\n");
      out.write("			</table>\n");
      out.write("			\n");
      out.write("			<form onsubmit=\"check(); return false\">\n");
      out.write("				<table style=\"margin-left: 4vw; border-spacing: 1vw; text-align: left;\">\n");
      out.write("					<tr>\n");
      out.write("						<th>変動費率</th>\n");
      out.write("						<td><input type=\"text\" id=\"variableRate\"></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>限界利益率</th>\n");
      out.write("						<td><input type=\"text\" id=\"marginalProfit\"></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>損益分岐点売上高</th>\n");
      out.write("						<td><input type=\"text\" id=\"breakEvenPoint\"></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>損益分岐点比率</th>\n");
      out.write("						<td><input type=\"text\" id=\"breakEvenPointRate\"></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>安全余裕率</th>\n");
      out.write("						<td><input type=\"text\" id=\"safetyMarginRatio\"></td>\n");
      out.write("					</tr>\n");
      out.write("				</table>\n");
      out.write("				<input type=\"submit\" value=\"答え合わせ\" style=\"margin-left: 13vw; margin-top: 2vw;\">\n");
      out.write("			</form>\n");
      out.write("			<p style=\"margin-left: 3vw; margin-top: 4vw;\">【損益分岐点比率】<br>\n");
      out.write("			実際の売上高に対する損益分岐点の割合を示し、この値が低いほど収益性が高く、かつ売上減少に耐える力が強い</p>\n");
      out.write("			<p style=\"margin-left: 3vw;\">【安全余裕率】<br>\n");
      out.write("			実際の売上高と損益分岐点の差がどれくらいあるかを示し、この値が高いほど経営に余裕があることを意味する</p>\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("		function check() {\n");
      out.write("			var myVariableRate = document.getElementById('variableRate').value;\n");
      out.write("			var myMarginalProfit = document.getElementById('marginalProfit').value;\n");
      out.write("			var myBreakEvenPoint = document.getElementById('breakEvenPoint').value;\n");
      out.write("			var myBreakEvenPointRate = document.getElementById('breakEvenPointRate').value;\n");
      out.write("			var mySafetyMarginRatio = document.getElementById('safetyMarginRatio').value;\n");
      out.write("\n");
      out.write("			var ans1;\n");
      out.write("			var ans2;\n");
      out.write("			var ans3;\n");
      out.write("			var ans4;\n");
      out.write("			var ans5;\n");
      out.write("\n");
      out.write("			// 変動費率答え合わせ\n");
      out.write("			if(myVariableRate == ");
      out.print( variable );
      out.write(") {\n");
      out.write("				ans1 = \"正解⭕️( 変動費 ÷ 売上高 )\" + '\\n' + \"答え：\" + ");
      out.print( variable );
      out.write(";\n");
      out.write("			} else {\n");
      out.write("				ans1 = \"不正解❌( 変動費 ÷ 売上高 )\" + '\\n' + \"答え：\" + ");
      out.print( variable );
      out.write(";\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			// 限界利益率答え合わせ\n");
      out.write("			if(myMarginalProfit == ");
      out.print( marginalProfit );
      out.write(") {\n");
      out.write("				ans2 = \"正解⭕( (売上高 - 変動費) ÷ 売上高 )\" + '\\n' + \"答え：\" + ");
      out.print( marginalProfit );
      out.write(";\n");
      out.write("			} else {\n");
      out.write("				ans2 = \"不正解❌( (売上高 - 変動費) ÷ 売上高 )\" + '\\n' + \"答え：\" + ");
      out.print( marginalProfit );
      out.write(";\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			// 損益分岐点答え合わせ\n");
      out.write("			if(myBreakEvenPoint == ");
      out.print( breakEvenPoint );
      out.write(") {\n");
      out.write("				ans3 = \"正解⭕( 固定費 ÷ (1 - 変動費率) )\" + '\\n' + \"答え：\" + ");
      out.print( breakEvenPoint );
      out.write(";\n");
      out.write("			} else {\n");
      out.write("				ans3 = \"不正解❌( 固定費 ÷ (1 - 変動費率) )\" + '\\n' + \"答え：\" + ");
      out.print( breakEvenPoint );
      out.write(";\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			// 損益分岐点比率答え合わせ\n");
      out.write("			if(myBreakEvenPointRate == ");
      out.print( breakEvenPointRate );
      out.write(") {\n");
      out.write("				ans4 = \"正解⭕( 損益分岐点売上高 ÷ 売上高 )\" + '\\n' + \"答え：\" + ");
      out.print( breakEvenPointRate );
      out.write(";\n");
      out.write("			} else {\n");
      out.write("				ans4 = \"不正解❌( 損益分岐点売上高 ÷ 売上高 )\" + '\\n' + \"答え：\" + ");
      out.print( breakEvenPointRate );
      out.write(";\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			// 安全余裕率答え合わせ\n");
      out.write("			if(mySafetyMarginRatio == ");
      out.print( safetyMarginRatio );
      out.write(") {\n");
      out.write("				ans5 = \"正解⭕( (売上高 - 損益分岐点売上高) ÷ 売上高 )\" + '\\n' + \"答え：\" + ");
      out.print( safetyMarginRatio );
      out.write(";\n");
      out.write("			} else {\n");
      out.write("				ans5 = \"不正解❌( (売上高 - 損益分岐点売上高) ÷ 売上高 )\" + '\\n' + \"答え：\" + ");
      out.print( safetyMarginRatio );
      out.write(";\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			alert(ans1 + '\\n' + ans2 + '\\n' + ans3 + '\\n' + ans4 + '\\n' + ans5);\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		</script>\n");
      out.write("	</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
