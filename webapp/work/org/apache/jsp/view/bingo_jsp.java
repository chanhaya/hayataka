/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2024-04-10 08:02:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import bean.Bingo;

public final class bingo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("bean.Bingo");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');

String game = request.getParameter("game");
ArrayList<Bingo> bingoList = null;
ArrayList<Integer> randomNum = null;
int random = 0;
int square = 0;
int success = 0;
if(game.equals("new")) {
	session.invalidate();
} else {
	bingoList = (ArrayList<Bingo>)session.getAttribute("bingoList");
	square = ((Integer)(session.getAttribute("square"))).intValue();
	randomNum = (ArrayList<Integer>)session.getAttribute("randomNum");
	if(randomNum != null) {
		random = ((Integer)(request.getAttribute("random"))).intValue();
		success = ((Integer)(request.getAttribute("success"))).intValue();
	}
}

      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("	<head>\n");
      out.write("		<title>ビンゴ</title>\n");
      out.write("		<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print( request.getContextPath() );
      out.write("/css/bingo.css\">\n");
      out.write("	</head>\n");
      out.write("\n");
      out.write("	<body>\n");
      out.write("		<div class=\"container\">\n");
      out.write("			<form method=\"post\" action=\"");
      out.print( request.getContextPath() );
      out.write("/bingo\">\n");
      out.write("				<p>？ × ？ のビンゴを作りますか(3, 5, 7 の中から)</p>\n");
      out.write("				<input type=\"text\" pattern=\"[3-7]\" id=\"number\" name=\"number\" required>\n");
      out.write("				<input type=\"hidden\" name=\"motion\" value=\"create\">\n");
      out.write("				<input type=\"submit\" value=\"作成\" onClick=\"return check()\">				\n");
      out.write("			</form>\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			");
 if(bingoList != null) { 
      out.write("\n");
      out.write("				<table>\n");
      out.write("					");
 for(int i = 0; i < square; i++) { 
      out.write("\n");
      out.write("						<tr>\n");
      out.write("							");
 for(int j = 0; j < square; j++) { 
      out.write("\n");
      out.write("								");
 Bingo bingo = bingoList.get(i * square +j); 
      out.write("\n");
      out.write("								");
 if(bingo.isHole() == true) { 
      out.write("\n");
      out.write("									<td class=\"red\">");
      out.print( bingo.getNum() );
      out.write("</td>\n");
      out.write("								");
 } else { 
      out.write("\n");
      out.write("									<td>");
      out.print( bingo.getNum() );
      out.write("</td>\n");
      out.write("								");
 } 
      out.write("\n");
      out.write("							");
 } 
      out.write("\n");
      out.write("						</tr>\n");
      out.write("					");
 } 
      out.write("\n");
      out.write("				</table>\n");
      out.write("				<form method=\"post\" action=\"");
      out.print( request.getContextPath() );
      out.write("/bingo\">\n");
      out.write("					<input type=\"hidden\" name=\"motion\" value=\"push\">\n");
      out.write("					<input type=\"submit\" value=\"抽選する\">\n");
      out.write("				</form>\n");
      out.write("			");
 }
      out.write("		\n");
      out.write("			");
 if(randomNum != null) { 
      out.write("\n");
      out.write("				<p>今回の数字：");
      out.print( random );
      out.write("</p>\n");
      out.write("				<p>これまでの数字</p>\n");
      out.write("				<p>\n");
      out.write("					");
 for(int i = 0; i < randomNum.size() - 1; i++) { 
      out.write("\n");
      out.write("						");
      out.print( randomNum.get(i) );
      out.write(",\n");
      out.write("					");
 } 
      out.write("\n");
      out.write("				</p>\n");
      out.write("				<p>ビンゴの数：");
      out.print( success );
      out.write("</p>\n");
      out.write("			");
 } 
      out.write("		\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		<script type=\"text/javascript\">\n");
      out.write("			function check() {\n");
      out.write("				var number = document.getElementById('number').value;\n");
      out.write("				if(number % 2 == 0) {\n");
      out.write("					alert(\"偶数が入力されています\");\n");
      out.write("					false;\n");
      out.write("				} \n");
      out.write("			}\n");
      out.write("		</script>\n");
      out.write("	</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
