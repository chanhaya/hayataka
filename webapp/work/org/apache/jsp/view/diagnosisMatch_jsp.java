/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2024-04-10 03:05:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class diagnosisMatch_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

String result = (String)request.getAttribute("result");
if(result == null) {
	result = "";
}
String name1 = (String)request.getAttribute("name1");
if(name1 == null) {
	name1 = "";
}
String name2 = (String)request.getAttribute("name2");
if(name2 == null) {
	name2 = "";
}

      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("	<head>\n");
      out.write("		<title>相性診断</title>\n");
      out.write("		<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print( request.getContextPath() );
      out.write("/css/main.css\">\n");
      out.write("	</head>\n");
      out.write("\n");
      out.write("	<body>\n");
      out.write("		<div class = \"container\">\n");
      out.write("			");
 if(!result.equals("")) { 
      out.write("\n");
      out.write("				<h2>");
      out.print( name1 );
      out.write('と');
      out.print( name2 );
      out.write("の相性結果</h2>\n");
      out.write("				<h2>");
      out.print( result );
      out.write("点</h2>\n");
      out.write("			");
 } 
      out.write("\n");
      out.write("			<h2>相性診断</h2>\n");
      out.write("			<p>相性診断したい名前をアルファベットで入れてください<br>\n");
      out.write("			その二人の相性を診断します</p>\n");
      out.write("			<h3>診断方法</h3>\n");
      out.write("			<p>①アルファベットを数字に変換します<br>\n");
      out.write("			&emsp;(例：A or a → 1, Z or z → 26)</p>\n");
      out.write("			<p>②隣り合った数字を足します<br>\n");
      out.write("			&emsp;(例：abcさん & defさん → 1 2 3 & 4 5 6 → 3 5 7 9 11)</p>\n");
      out.write("			<p>③足した結果の要素数が1つになるまで繰り返します、<br>\n");
      out.write("			&emsp;また計算の過程で101以上になった場合は101を引きます<br>\n");
      out.write("			&emsp;(例： 60 70 → 130 → 29  相性29点)</p>\n");
      out.write("			<p>④結果の大きい方を表示します<br>\n");
      out.write("			&emsp;(例： abさん & cdさんの場合、<br>\n");
      out.write("			&emsp;&emsp;abcd or cdab の並びが考えられるため、結果が大きい方を表示します)\n");
      out.write("		\n");
      out.write("			<form method = \"post\" action = \"");
      out.print( request.getContextPath() );
      out.write("/diagnosisMatch\">\n");
      out.write("				<table>\n");
      out.write("					<tr>\n");
      out.write("						<th>1人目の名前</th>\n");
      out.write("						<td><input type=\"text\" pattern=\"[a-zA-Z]+\" placeholder=\"sato\" name=\"first\" required></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>2人目の名前</th>\n");
      out.write("						<td><input type=\"text\" pattern=\"[a-zA-Z]+\" placeholder=\"suzuki\" name=\"second\" required></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th></th>\n");
      out.write("						<td><input type=\"submit\" value=\"送信\"></td>\n");
      out.write("					</tr>\n");
      out.write("				</table>\n");
      out.write("				\n");
      out.write("			</form>\n");
      out.write("		</div>\n");
      out.write("	</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
