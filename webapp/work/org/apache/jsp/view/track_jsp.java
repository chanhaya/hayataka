/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2024-05-15 08:53:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class track_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

// 問1
int track1 = (int)(Math.random() * 10 + 1) * 1000;
int a1 = ((int)(Math.random() * 22)) * 10 + 80;
int b1 = ((int)(Math.random() * 22)) * 10 + 80;
//int track1 = 1200;
//int a1 = 60;
//int b1 = 120;
// 簡単になってしまうのでa1とb1が同じならやりなおし
// aの方が速いことにする
if(a1 == b1) {
	while(a1 == b1) {
		a1 = ((int)(Math.random() * 22)) * 10 + 80;
		b1 = ((int)(Math.random() * 22)) * 10 + 80;
	}
}
if(a1 > b1) {
	int tmp = a1;
	a1 = b1;
	b1 = tmp;
}
// 秒速
double sa1 = (double)(Math.round(a1 / 60.0 * 100)) / 100;
double sb1 = (double)(Math.round(b1 / 60.0 * 100)) / 100;
int ans1 = track1 / (a1 + b1); // 分
double dsans1 = (double)(Math.ceil(track1 / (sa1 + sb1)));// 秒
int sans1 = (int)dsans1 % 60;

// 問2
int track2 = (int)(Math.random() * 10 + 1) * 1000;
//int track2 = 1500;
int a2 = (int)(Math.random() * 15 + 1);
int b2 = (int)(Math.random() * 15 + 16);

//int a2 = 5;
//int b2 = 30;
int ansa = (track2 * (a2 + b2)) / (2 * a2 * b2);
int ansb = (b2 * ansa - track2) / b2;

// 問3
int track3 = (int)(Math.random() * 5 + 1) * 1000;
int a3 = ((int)(Math.random() * 24)) * 5 + 80;
int b3 = ((int)(Math.random() * 24)) * 5 + 80;

if(a3 == b3) {
	while(a3 == b3) {
		a3 = ((int)(Math.random() * 24)) * 5 + 80;
		b3 = ((int)(Math.random() * 24)) * 5 + 80;
	}
}

if(a3 < b3) {
	int tmp = a3;
	a3 = b3;
	b3 = tmp;
}
int time1 = track3 / (a3 + b3);
int time2 = track3 / (a3 - b3);


      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("	<head>\n");
      out.write("		<title>トラック</title>\n");
      out.write("		<style>\n");
      out.write("			.hidden {\n");
      out.write("			display: none;\n");
      out.write("			}\n");
      out.write("			.appear {\n");
      out.write("				display: block;\n");
      out.write("			}\n");
      out.write("		</style>\n");
      out.write("	</head>\n");
      out.write("\n");
      out.write("	<body>\n");
      out.write("		<div>\n");
      out.write("			<p>問1.<br>\n");
      out.write("			1周");
      out.print( track1 );
      out.write("mのトラックを同じ地点から同時にスタートして<br>\n");
      out.write("			Aさんは");
      out.print( a1 );
      out.write("m/分、Bさんは");
      out.print( b1 );
      out.write("m/分で2人が反対方向に走ったところ何分後に何m地点で出会うか</p>\n");
      out.write("			<p>Aさんは");
      out.print( sa1 );
      out.write("m/秒</p>\n");
      out.write("			<p>Bさんは");
      out.print( sb1 );
      out.write("m/秒</p>\n");
      out.write("			<div class=\"hidden\" id=\"hidden1\">\n");
      out.write("				<p>");
      out.print( ans1 );
      out.write('分');
      out.print( sans1 );
      out.write("秒後</p>\n");
      out.write("				<p>");
      out.print( (int)(a1 * ans1 + sa1 * sans1) );
      out.write("m地点</p>\n");
      out.write("			</div>\n");
      out.write("\n");
      out.write("			<p>問2.(時間を決めて問題を作る)<br>\n");
      out.write("			1周");
      out.print( track2 );
      out.write("mのトラックを同じ地点から同時にスタートして<br>\n");
      out.write("			AさんとBさんはそれぞれ一定の速さで走ることにした。<br>\n");
      out.write("			2人が反対方向に走ったところ、");
      out.print( a2 );
      out.write("分後に初めて出会った。<br>\n");
      out.write("			2人が同じ方向に走ったところ、");
      out.print( b2 );
      out.write("分後にAさんがBさんに追いついた。<br>\n");
      out.write("			AさんとBさんの走る速さをそれぞれ求めよ</p>\n");
      out.write("			<div class=\"hidden\" id=\"hidden2\">\n");
      out.write("				<p>Aさんの速さ");
      out.print( ansa );
      out.write("m/分</p>\n");
      out.write("				<p>Bさんの速さ");
      out.print( ansb );
      out.write("m/分</p>\n");
      out.write("			</div>\n");
      out.write("			\n");
      out.write("			<p>問3.(速度を決めて問題を作る)<br>\n");
      out.write("			1周");
      out.print( track3 );
      out.write("mのトラックを同じ地点から同時にスタートして<br>\n");
      out.write("			AさんとBさんはそれぞれ一定の速さで走ることにした。<br>\n");
      out.write("			2人が反対方向に走ったところ、");
      out.print( time1 );
      out.write("分後に初めて出会った。<br>\n");
      out.write("			2人が同じ方向に走ったところ、");
      out.print( time2 );
      out.write("分後にAさんがBさんに追いついた。<br>\n");
      out.write("			AさんとBさんの走る速さをそれぞれ求めよ</p>\n");
      out.write("			<div class=\"hidden\" id=\"hidden3\">\n");
      out.write("				<p>Aさんの速さ");
      out.print( a3 );
      out.write("m/分</p>\n");
      out.write("				<p>Bさんの速さ");
      out.print( b3 );
      out.write("m/分</p>\n");
      out.write("			</div>\n");
      out.write("			\n");
      out.write("			<button onClick=\"appear();\">答え表示</button>\n");
      out.write("			\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("			function appear() {\n");
      out.write("				var answer1 = document.getElementById('hidden1');\n");
      out.write("				var answer2 = document.getElementById('hidden2');\n");
      out.write("				var answer3 = document.getElementById('hidden3');\n");
      out.write("				answer1.classList.toggle('appear');\n");
      out.write("				answer2.classList.toggle('appear');\n");
      out.write("				answer3.classList.toggle('appear');\n");
      out.write("					\n");
      out.write("			}\n");
      out.write("		\n");
      out.write("		</script>\n");
      out.write("	\n");
      out.write("	</body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
